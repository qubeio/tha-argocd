apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: alloy
  namespace: argocd
spec:
  project: fleet-manager
  source:
    repoURL: https://grafana.github.io/helm-charts
    targetRevision: 1.3.0
    chart: alloy
    helm:
      values: |
        alloy:
          configMap:
            content: |
              // Discover all pod log files
              local.file_match "pod_logs" {
                path_targets = [{
                  __path__ = "/var/log/pods/*/*/*.log",
                }]
              }

              // Tail discovered log files and forward to Loki
              loki.source.file "pod_logs" {
                targets    = local.file_match.pod_logs.targets
                forward_to = [loki.process.add_labels.receiver]
              }

              // Extract labels from log file path
              loki.process "add_labels" {
                // Extract namespace, pod name, and container from path
                // Path format: /var/log/pods/<namespace>_<pod>_<uid>/<container>/<file>.log
                stage.regex {
                  expression = "^/var/log/pods/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_[^/]+/(?P<container>[^/]+)/.*\\.log$"
                  source     = "filename"
                }

                // Add extracted labels
                stage.labels {
                  values = {
                    namespace = "",
                    pod       = "pod_name",
                    container = "",
                  }
                }

                forward_to = [loki.write.loki.receiver]
              }

              // Write logs to Loki
              loki.write "loki" {
                endpoint {
                  url = "http://loki.monitoring:3100/loki/api/v1/push"
                }
              }

          # Mount host paths to access pod logs
          mounts:
            varlog: true  # Mount /var/log from host

        # Deploy as DaemonSet to run on all nodes
        controller:
          type: "daemonset"

        # Resource limits
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi

        # Service account with permissions to discover pods
        serviceAccount:
          create: true

  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true

